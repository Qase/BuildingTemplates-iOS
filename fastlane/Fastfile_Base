# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage


require 'dotenv/load'

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.178.0"
default_platform :ios
# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# Commands
# fastlane init
# fastlane add_plugin versioning

platform :ios do

  # -------------------------
  # Before all (If neccessary do something at begining of all lanes)
  # -------------------------

  before_all do
    unlock_default_keychain()
    if ENV["AUTO_REFRESH_PROFILE"]
      refresh_profiles(readonly:true)
    end
  end

  # -------------------------
  # General
  # -------------------------

  desc "Cleans derived data"
  lane :clean do
    clear_derived_data
  end

  desc "Clean All (clean derived data and reset simulators)"
  lane :clean_all do
    clear_derived_data
    reset_simulator_contents 
  end

  desc "Register new development device to provisioning profile (prompts name and UUID)"
  lane :register do  |options|
      device_name = prompt(text: "Enter the device name: ")
      device_udid = prompt(text: "Enter the device UDID: ")
    
      get_appstore_api_key()

      device_hash = {}
      device_hash[device_name] = device_udid
      register_devices(devices: device_hash)
      if !options[:norefresh]
        refresh_profiles
      end
  end

  desc "Register all devices from url defined in FL_DEVICES_URL"
  lane :register_all do  |options|
    downloadSheetUrl = ENV["FL_DEVICES_URL"]
    devicesPath = "./fastlane/devices.txt"
    sh("cd .. && curl -L '#{downloadSheetUrl}' --output #{devicesPath}")

    get_appstore_api_key()
    register_devices(devices_file: devicesPath)
    if !options[:norefresh]
      refresh_profiles
    end
  end

  # -------------------------
  # Git
  # -------------------------
  desc "Automaticcaly detects and ensures correct commit message format"
  lane :setup_git_hooks do |options|
    script = %{#!/bin/bash

# regex to validate in commit msg
commit_text=`cat $1`
current_branch=`git rev-parse --abbrev-ref HEAD`

#branch_regex="(.*?)\\/(.*)"
branch_regex="([^,\\/]*)/(.*)"

if [[ $current_branch =~ $branch_regex ]] 
then
  branch_prefix="${BASH_REMATCH[1]}"
  branch_name="${BASH_REMATCH[2]}"

  #echo "Branch: Prefix: $branch_prefix Name: $branch_name"

  commit_regex="([^,:,\\ ]{2,10}(\\:\\ *))?(\\([^,\\ ]*\\)|$branch_name)?(\\ *)?(.*)"

  if [[ $commit_text =~ $commit_regex ]] 
  then
    commit_prefix="${BASH_REMATCH[1]}"
    commit_name="${BASH_REMATCH[3]}"
    commit_message="${BASH_REMATCH[5]}"
    #echo "Commit: Prefix: $commit_prefix Name: $commit_name Message: $commit_message"
  else 
    commit_message="$commit_text"
    #echo "Nope"
  fi

  if [[ $commit_prefix == "" ]]
  then
    prefix="$branch_prefix"
  else 
    prefix="${commit_prefix//:}"
    prefix="${prefix// }"
  fi

  if [[ $commit_prefix == "" || $commit_name == "" ]] 
  then
    #echo "Repairing commit"
    commit_text="$prefix: ($branch_name) $commit_message"
  fi

  echo "$commit_text" > $1
fi
}
    path = sh("git rev-parse --show-toplevel").strip
    hook_path = path + "/.git/hooks/commit-msg"
    File.open(hook_path, 'w+') { |file| file.write(script) }
    sh("chmod +x " + hook_path)
  end

  desc "Automaticcaly detects and ensures correct commit message format"
  lane :cancel_git_hooks do |options|
    path = sh("git rev-parse --show-toplevel").strip
    hook_path = path + "/.git/hooks/commit-msg"
    sh("rm " + hook_path)
  end

  # -------------------------
  # Version control
  # -------------------------

  private_lane :version do |options|
    branch = git_branch()
    if ['master', 'main', 'hotfix', 'dev', 'develop'].include? branch.downcase
      branch = ""
    elsif branch.downcase.include? "release"
      branch = ""
    elsif ENV.has_key?("CI_COMMIT_TAG")
      branch = ""
    end

    
    number_of_commits_var = number_of_commits()

    unless ENV["NUMBER_OF_COMMITS_MODDIFIER"].nil?
      number_of_commits_var = number_of_commits_var + Integer(ENV["NUMBER_OF_COMMITS_MODDIFIER"])
    end
      
    build_number = "#{number_of_commits_var}"
    if branch != ""
      build_number += "(#{branch})"
    end
    puts build_number
    build_number
  end

  desc "Sets project build number based on commits and branch"
  lane :version_set do |options|
    number_of_commits = version().gsub("/", "\\/")
    sh("cd .. && agvtool new-version -all \"\\\"#{number_of_commits}\\\"\"")
  end


  # -------------------------
  # Certificates
  # -------------------------

  lane :create_default_keychain do |options|
    create_keychain(
      default_keychain: false,
      unlock: true,
      timeout: false,
      lock_when_sleeps: false
    )
  end

  lane :unlock_default_keychain do |options|
    begin
      unlock_keychain()
    rescue
      create_keychain()
    end
  end

  lane :delete_default_keychain do |options|
    delete_keychain( # If the keychain file is located in the standard location `~/Library/Keychains`, then it is sufficient to provide the keychain file name, or file name with its suffix.
    )
  end

  desc "Update single certificate (readonly): scheme:{development, appstore, adhoc}"
  lane :certificate do |options|
    get_appstore_api_key()
    match(
        type: options[:scheme],
        verbose: false,
        readonly: true
      )
  end

    desc "Alias to refresh_profiles"
    lane :certificates do |options|
        refresh_profiles()
    end



  desc "Update certificates for all schemes (development, appstore, adhoc)"
  lane :refresh_profiles do |options|
    get_appstore_api_key()
    ["development", "adhoc", "appstore"].each do |type|
      match(
        type: type,
        readonly: options[:readonly],
        force_for_new_devices: !options[:readonly]
      )
    end
  end

  # -------------------------
  # Informational
  # -------------------------

  private_lane :get_xcode_project_path do |options|
    xcodeproj_path = ENV["FL_VERSION_NUMBER_PROJECT"]
    if xcodeproj_path
      xcodeproj_path = "../#{xcodeproj_path}"
    else
      xcodeproj_path = sh("find \"..\" -maxdepth 1 -name \"*.xcodeproj\" | head -n 1 ").strip
      puts "Detected xcodeproj_path:  \t #{xcodeproj_path}"
    end
    xcodeproj_path
  end

  # Override this lane if needed (Getting privisioning profiles)
  private_lane :project_build_number do |options|
    get_build_number().strip.gsub('"', '')
  end

  private_lane :project_version do |options|
    get_version_number()
  end

  desc "Prints information (like version ...) about project"
  lane :info do |options|
    version_set()
    version = project_version()
    version_bundle = project_build_number()
    commits = number_of_commits()
    dir  = sh("pwd")
  
    puts "\n"
    UI.important "Project Data:"
    puts "Building dir:  \t #{dir.strip}"
    puts "App version:   \t #{version.strip}"
    puts "Bundle version:\t #{version_bundle}"
    puts "Commits:       \t #{commits}"
  end

  # -------------------------
  # Application building
  # -------------------------

  # Override this lane if needed (Getting privisioning profiles)
  private_lane :get_provisioning_profiles do |options|
    xcode_provisioning = options[:xcode_provisioning]

    provisioningProfiles = Hash.new
    provisioningProfiles[ENV["APP_IDENTIFIER"]] = xcode_provisioning

    provisioningProfiles
  end

  #Override this lane if needed (In case entire build action needs to be changed)
  private_lane :custom_gym do |options|

    if is_ci? && ENV["CLEAN_CI_BEFORE_BUILD"]
      clean()
    end
    provisioningProfiles = get_provisioning_profiles(options)
    gym(
      export_method: options[:xcode_export_method],
      scheme: options[:xcode_scheme],
      verbose: true,
      export_options: {
        provisioningProfiles: provisioningProfiles
      }
    )
  end

  desc "Build aplication scheme:{development, appstore, adhoc}"
  lane :build do |options|
    if options[:scheme] == "adhoc"
      xcode_export_method = "ad-hoc"
      xcode_scheme = ENV["XCODE_SCHEME_ADHOC"] ? ENV["XCODE_SCHEME_ADHOC"] : ENV["XCODE_SCHEME"]+"-Adhoc"
      xcode_provisioning = ENV["XCODE_PROVISIONING_ADHOC"] ? ENV["XCODE_PROVISIONING_ADHOC"] : "match AdHoc "+ ENV["APP_IDENTIFIER"]
    elsif options[:scheme] == "appstore"
      xcode_export_method = "app-store"
      xcode_scheme = ENV["XCODE_SCHEME_PROD"] ? ENV["XCODE_SCHEME_PROD"] : xcode_scheme = ENV["XCODE_SCHEME"]
      xcode_provisioning = ENV["XCODE_PROVISIONING_PROD"] ? ENV["XCODE_PROVISIONING_PROD"] : "match AppStore "+ ENV["APP_IDENTIFIER"]
    else
      xcode_export_method = "development"
      xcode_scheme = ENV["XCODE_SCHEME"]
      xcode_provisioning = ENV["XCODE_PROVISIONING"] ? ENV["XCODE_PROVISIONING"] : "match Development "+ ENV["APP_IDENTIFIER"]
    end
    puts "xcode_provisioning: \t #{xcode_provisioning}"
    custom_gym(
      xcode_export_method: xcode_export_method,
      xcode_scheme: xcode_scheme,
      xcode_provisioning: xcode_provisioning
    )
  end



  desc "Only build a project"
  lane :build_only do
    gym(
      skip_package_ipa: true,
      include_symbols: false,
      scheme: ENV["XCODE_SCHEME"]
    )
  end

  # -------------------------
  # Deploying
  # -------------------------

  desc "Setup Apple Two-factor Auth"
  lane :get_appstore_api_key do |options|
    if ENV["APP_STORE_CONNECT_API_KEY_KEY_FILEPATH"]
    app_store_connect_api_key(
      duration: 1200, # optional (maximum 1200)
      in_house: false, # optional but may be required if using match/sigh
    )
    end
  end
  
  desc "Setup Apple Two-factor Auth"
  lane :setup_apple_login do |options|

    if prompt(text: "Delete local fastlane credentials", boolean: true)
      rm = `rm -rf ~/.fastlane/spaceship/`
    end

    change_user = prompt(text: "Use following login username (" + ENV["MATCH_USERNAME"] + ")", boolean: true)
    if change_user
      username = ENV["MATCH_USERNAME"]
    else 
      username =  prompt(text: "Enter new username")
    end

    set_app_pass = prompt(text: "Setup new App password? (" + ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] + ")", boolean: true)
    new_app_pass = ""
    if set_app_pass
      new_app_pass = prompt(text: "Enter new App password? (https://appleid.apple.com/#!&page=signin)")
    end

    output = []
    IO.popen("fastlane spaceauth -u " + username ).each do |line|
      puts line
      output << line.chomp
    end

    tokenString = output.join("\n").match(/Pass the following via the FASTLANE_SESSION environment variable:\n(^.*)/i).captures.join('###').gsub('[4m[36m', '').gsub('[0m[0m', '')

    file_name = ".env.default"
    text = File.read(file_name)
    new_contents = text.gsub(/.*FASTLANE_SESSION.*\n/, "FASTLANE_SESSION = \"" + tokenString + "\"\n" )

    if change_user
      new_contents = new_contents.gsub(/.*MATCH_USERNAME.*\n/, "MATCH_USERNAME = \"" + username + "\"\n" )
    end

    if set_app_pass
        new_contents = new_contents.gsub(/.*FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD.*\n/, "FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD = \"" + new_app_pass + "\"\n" )
    end

    File.open(file_name, "w") {|file| file.puts new_contents }


    if prompt(text: "Commit changes in " + file_name + "?", boolean: true)
      git_commit(path: ["./fastlane/"+file_name], message: "GIT: Updated Apple login authorization")
      if prompt(text: "Push changes?", boolean: true)
        push_to_git_remote()
      end
    end

  end
  
  lane :deploy_firebase do
    if ENV["SUPRESS_DEPLOY"]
      next
    end
    
    change_log = %x[git log -3  --pretty=format:"%h %s" | cat]
    firebase_app_distribution(
      firebase_cli_token: ENV["FIREBASEAPPDISTRO_CUST_CLI_TOKEN"],
      release_notes: change_log,
    )

  end

  desc "Deploy application to testflight"
  lane :deploy_pilot do
    if ENV["SUPRESS_DEPLOY"]
      next
    end

    get_appstore_api_key()

    pilot(
      distribute_external: true,
      verbose: true,
    )
  end

  desc "Deploy application to appstore"
  lane :deploy_appstore do
    if ENV["SUPRESS_DEPLOY"]
      next
    end

    get_appstore_api_key()

    deliver(
      verbose: true,
      skip_metadata: true,
      skip_screenshots: true,
    )
  end

  desc "Release app (runs deploy_appstore)"
  lane :release do
    deploy_appstore()
  end

  # -------------------------
  # Testing
  # -------------------------

  desc "Run swiftlint"
  lane :lint do
    swiftlint
  end

  desc "Run all tests (scan command). UNIT and UI"
  lane :test do
    scan
  end

  desc "Run UI test and create snapshots (saves images o google drive)"
  lane :snapshots do
    snapshot
  end

  # -------------------------
  # Complete lanes for CI
  # -------------------------

  desc "CI - Build and upload to crashlytics"
  lane :ci_crashlytics do
    version_set()
    build(scheme: "adhoc")
    deploy_crashlytics()
  end

  desc "CI - Build and upload to crashlytics"
  lane :ci_firebase do
    version_set()
    build(scheme: "adhoc")
    deploy_firebase()
  end

  desc "CI - Build and upload to testflight"
  lane :ci_testflight do
    version_set()
    build(scheme: "appstore")
    deploy_pilot()
  end

  desc "CI - Build and upload to testflight"
  lane :ci_appstore do
    version_set()
    build(scheme: "appstore")
    deploy_appstore()
  end

  desc "CI nightbuild"
  lane :ci_nightbuild do
    ci_firebase()
  end

  # -------------------------
  # Error callback
  # -------------------------

  error do |lane, exception, options|
    if is_ci?
      #slack(
      #  message: exception.message,
      #  success: false
      #)
    else
      UI.important "Error(x): #{exception.message}"      
    end

  end

  # -------------------------
  # SwiftGen
  # -------------------------

  desc "Download swiftgen folder wtih config file and templates"
  lane :setup_swiftgen do
    sh <<-SCRIPT
      # Check if in the project folder
      if [ ! -d 'fastlane' ]; then
        cd ..
      fi

      # Check if the SwiftGen folder is already setup
      if [ -d 'swiftgen' ]; then
        exit 0
      fi

      # Check if the swiftgen templates folder are already downloaded
      if [ ! -d 'swiftgen-templates-main' ]; then
        echo "\nDownloading SwiftGen templates ..."
        curl -L -O https://github.com/Qase/swiftgen-templates/archive/main.zip
        unzip main.zip
        rm main.zip
      fi
    
      mv swiftgen-templates-main/swiftgen swiftgen
      rm -r swiftgen-templates-main
    SCRIPT
  end

  desc "Download swiftgen folder wtih config file and templates"
  lane :update_swiftgen_templates do
    sh <<-SCRIPT
      # Check if is it in the project folder
      if [ ! -d 'fastlane' ]; then
        cd ..
      fi

      # Check if the SwiftGen folder is already setup
      if [ ! -d 'swiftgen' ]; then
        echo "SwiftGen folder isn't setup\n Run 'fastlane setup_swiftgen'"
        exit 1
      fi

      # Check if the swiftgen templates folder are already downloaded
      if [ ! -d 'swiftgen-templates-main' ]; then
        echo "\nDownloading SwiftGen templates ..."
        curl -L -O https://github.com/Qase/swiftgen-templates/archive/main.zip
        unzip main.zip
        rm main.zip
      fi

      cd swiftgen-templates-main/swiftgen

      # Iterate through all templates and copy them in the swiftgen folder without the template config file
      # Note: command cd should be in the one call of "sh" because the next "sh" call starts in the root folder
      
      echo "\nUpdating SwiftGen templates:"
      for FILE in *; do 
        if [ \"$FILE\" != 'swiftgen.yml' ]; then 
          cp $FILE ../../swiftgen/$FILE
          echo $FILE 'UPDATED'
        fi
      done

      rm -r ../../swiftgen-templates-main
    SCRIPT
  end
  
end